#depend "chem"
#depend "Box2dWeb-2.1.a.3" bare

const b2Vec2 = Box2D.Common.Math.b2Vec2
const b2BodyDef = Box2D.Dynamics.b2BodyDef
const b2Body = Box2D.Dynamics.b2Body
const b2FixtureDef = Box2D.Dynamics.b2FixtureDef
const b2World = Box2D.Dynamics.b2World
const b2DebugDraw = Box2D.Dynamics.b2DebugDraw
const b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape
const b2CircleShape = Box2D.Collision.Shapes.b2CircleShape

Chem.onReady ->
  const canvas = document.getElementById "game"
  const engine = new Chem.Engine canvas

  # GIMME THE FIZZAQS!
  world = null
  ship_body = null
  time_scale_exponent = 2
  time_scale = -> Math.pow 2, time_scale_exponent
  const min_dt = 1/60
  paused = false
  physics_per_second = 0
  let
    gravity = new b2Vec2 0, 1
    world := new b2World gravity, true

    debug_drawer = new b2DebugDraw()
    debug_drawer.SetSprite canvas.getContext "2d"
    debug_drawer.SetDrawScale 32
    debug_drawer.SetFillAlpha 0.5
    debug_drawer.SetLineThickness 1
    debug_drawer.SetFlags b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit
    world.SetDebugDraw debug_drawer

    fixture_definition = new b2FixtureDef!
    fixture_definition.density = 1.0
    fixture_definition.friction = 0.5
    fixture_definition.restitution = 0

    body_definition = new b2BodyDef!

    # create ground
    body_definition.type = b2Body.b2_staticBody
    body_definition.position.x = 9
    body_definition.position.y = 13
    fixture_definition.shape = new b2PolygonShape!
    fixture_definition.shape.SetAsBox 10, 0.5
    world.CreateBody(body_definition).CreateFixture fixture_definition

    # create some objects
    body_definition.type = b2Body.b2_dynamicBody
    fixture_definition.shape = new b2CircleShape 1
    body_definition.position.x = 5
    body_definition.position.y = 5
    ship_body := world.CreateBody body_definition
    ship_body.CreateFixture fixture_definition

  engine.on 'update', (real_dt, dx) ->
    paused := !paused if engine.buttonJustPressed Chem.Button.Key_Space
    if engine.buttonJustPressed Chem.Button.Key_1
      if engine.buttonState Chem.Button.Key_Shift
        time_scale_exponent--
      else
        time_scale_exponent++
      time_scale_exponent := clamp time_scale_exponent, 0, 4

    if not paused
      if engine.buttonJustPressed Chem.Button.Key_Up
        ship_body.ApplyImpulse new b2Vec2(0, -10), ship_body.m_xf.position

      # catch up the world to what we expect
      dt = 0
      limit = real_dt * time_scale!
      physics = 0
      while dt < limit
        world.Step min_dt, 1, 1
        world.ClearForces!
        dt += min_dt
        physics++
      physics_per_second := physics / real_dt


  engine.on 'draw', (context) ->
    world.DrawDebugData!

    # draw a little fps counter in the corner
    cursor = 0
    context.fillStyle = '#000'

    engine.drawFps!
    cursor += 100

    context.fillText "phys/s=#{Math.round(physics_per_second)}", cursor, engine.size.y
    cursor += 100

    context.fillText "#{if paused then "paused" else "running"}", cursor, engine.size.y
    cursor += 100

    context.fillText "time_scale=#{Math.round(time_scale!*25)/100}", cursor, engine.size.y
    cursor += 100

  engine.start!
  canvas.focus!

clamp = (n, min, max) ->
  return min if n < min
  return max if n > max
  return n
