#depend "chem"
#depend "Box2dWeb-2.1.a.3" bare

const
  {b2Vec2} = Box2D.Common.Math
  {b2BodyDef, b2Body, b2FixtureDef, b2World} = Box2D.Dynamics
  {b2Shape, b2PolygonShape, b2CircleShape} = Box2D.Collision.Shapes

class Time
  (@world) ~>
    @speed = 0
    @elapsed = 0
    @max_elapsed = 1000
    @bodies = []
    @history = []
    @color = [0,0,0]

  add_rectangle: !(x, y, half_width, half_height) ->
    body_definition = new b2BodyDef!
    body_definition.type = b2Body.b2_staticBody
    body_definition.position.x = x
    body_definition.position.y = y
    fixture_definition = new b2FixtureDef!
    fixture_definition.density = 1.0
    fixture_definition.friction = 0.5
    fixture_definition.restitution = 0.2
    fixture_definition.shape = new b2PolygonShape!
    fixture_definition.shape.SetAsBox half_width, half_height
    body = @world.CreateBody body_definition
    body.CreateFixture fixture_definition
    @bodies.push body

  add_circle: !(x, y, radius) ->
    body_definition = new b2BodyDef!
    body_definition.type = b2Body.b2_staticBody
    body_definition.position.x = x
    body_definition.position.y = y
    fixture_definition = new b2FixtureDef!
    fixture_definition.density = 1.0
    fixture_definition.friction = 0.5
    fixture_definition.restitution = 0.2
    fixture_definition.shape = new b2CircleShape radius
    body = @world.CreateBody body_definition
    body.CreateFixture fixture_definition
    @bodies.push body

  init: ->
    @store_history 1
    @initial_frame = @history[0]

  set_body_type: !(type) ->
    for body of @bodies
      body.SetType type

  accelerate: !(acceleration) ->
    old_speed = @speed
    @speed = clamp @speed+acceleration, -1, 1
    if old_speed <= 0 and @speed > 0
      # get these suckers going
      @set_body_type b2Body.b2_dynamicBody
      @load_history_frame @history[@history.length-1]
    else if old_speed > 0 and @speed <= 0
      # turn these bodies into oblivious kinematics
      @set_body_type b2Body.b2_kinematicBody
      @load_history_frame @history[@history.length-1]
    else if old_speed > 0 and @speed > 0
      # adjust speed of moving objects
      @scale_body_speeds @speed/old_speed
    else if @speed is 0
      # TODO: we shouldn't have to do this.
      @scale_body_speeds 0

  scale_body_speeds: !(factor=@speed) ->
    # adjust the bodies to their new speed
    for body of @bodies
      body.SetLinearVelocity scale body.GetLinearVelocity!.Copy!, factor
      body.SetAngularVelocity body.GetAngularVelocity! * factor

  step: !->
    @elapsed += @speed
    elapsed_before_clamping = @elapsed
    @elapsed = clamp @elapsed, 0, @max_elapsed
    if @elapsed is not elapsed_before_clamping
      # stop time here at the boundary
      @accelerate -@speed
    if @history.length + 1 < @elapsed
      @store_history!
    if @history.length - 1 >= @elapsed
      @load_history_frame @history.pop!

  store_history: !(speed=@speed) ->
    history_frame = []
    for body of @bodies
      history_frame.push(
        position: body.GetPosition!.Copy!
        angle: body.GetAngle!
        # store the velocity as if we were traveling at normal speed
        velocity: scale body.GetLinearVelocity!.Copy!, 1/speed
        angular_velocity: body.GetAngularVelocity! / speed
      )
    @history.push history_frame

  load_history_frame: !(history_frame) ->
    history_frame ?= @initial_frame
    for state, i of history_frame
      @bodies[i].SetPositionAndAngle state.position, state.angle
      @bodies[i].SetLinearVelocity state.velocity
      @bodies[i].SetAngularVelocity state.angular_velocity
    @scale_body_speeds!

function scale(vector, scalar)
  answer = vector.Copy!
  answer.x *= scalar
  answer.y *= scalar
  answer

Chem.onReady ->
  const canvas = document.getElementById "game"
  const engine = new Chem.Engine canvas

  # GIMME THE FIZZAQS!
  world = null
  const min_dt = 1/60
  physics_per_second = 0
  times = []
  let
    gravity = new b2Vec2 0, 0
    world := new b2World gravity, true

    for i from 0 to 4
      times.push time = new Time world
      continue if i is 0
      for _ from 1 to 3
        Math.random!
        time.add_circle 2+Math.random!*18, 2+Math.random!*9, Math.random!*0.5+0.5

    # the ground
    times.0.add_rectangle 9, 13, 10, 0.5
    times.1.color = [0xff,0,0]
    times.2.color = [0,0xff,0]
    times.3.color = [0,0,0xff]
    times.4.color = [0xff,0xff,0]

    for time of times
      time.init!

  engine.on 'update', (real_dt, dx) ->
    for time, i of times
      # time 0 is the statics
      continue if i is 0
      if engine.buttonJustPressed Chem.Button["Key_#{i}"]
        acceleration = if engine.buttonState Chem.Button.Key_Shift then -1 else 1
        acceleration *= 0.25
        time.accelerate acceleration

    # catch up the world to what we expect
    total_dt = 0
    while total_dt < real_dt
      step min_dt
      total_dt += min_dt

  step = !(dt) ->
    # apply gravity
    for time of times
      continue unless time.speed > 0
      for body of time.bodies
        gravity = body.GetMass!*time.speed
        body.ApplyForce new b2Vec2(0, gravity), body.GetPosition!

    world.Step dt, 1, 1
    for time of times
      time.step!
    world.ClearForces!


  engine.on 'draw', (context) ->
    context.fillStyle = '#fff'
    context.clearRect 0, 0, engine.size.x, engine.size.y

    # if we apply the scale as a transformation, it will affect the width of strokes.
    scale = 32
    for time of times
      context.fillStyle = "rgba(#{time.color},0.5)"
      context.strokeStyle = "rgba(#{time.color},0.9)"
      for body of time.bodies
        shape = body.GetFixtureList!.GetShape!
        switch shape.m_type
          case b2Shape.e_circleShape
            center = body.GetPosition!
            radius = shape.m_radius;
            angle = body.GetAngle!
            context.moveTo 0, 0
            context.beginPath!
            context.arc scale*center.x, scale*center.y, scale*radius, 0, Math.PI * 2, true
            context.moveTo scale*center.x, scale*center.y
            context.lineTo scale*(center.x + radius*Math.cos angle), scale*(center.y + radius*Math.sin angle)
            context.closePath!
            context.fill!
            context.stroke!
          case b2Shape.e_polygonShape
            center = body.GetPosition!
            vertexes = shape.GetVertices!.slice(0, shape.GetVertexCount!)
            v0 = vertexes.0
            context.beginPath!
            context.moveTo scale*(center.x+v0.x), scale*(center.y+v0.y)
            for v of vertexes
              context.lineTo scale*(center.x+v.x), scale*(center.y+v.y)
            context.lineTo scale*(center.x+v0.x), scale*(center.y+v0.y)
            context.closePath!
            context.fill!
            context.stroke!

    # draw a little fps counter in the corner
    context.fillStyle = '#000'
    engine.drawFps!

    # UI is on the right
    const
      ui_width = 200
      ui_right_spacing = 10
      ui_left = engine.size.x - (ui_width + ui_right_spacing)
      bar_heith = 30
      bar_spacing = 10
    for time, i of times
      continue if i is 0
      context.save!
      top = i*(bar_heith + bar_spacing)
      # background
      context.fillStyle = "rgba(0,0,0,0.25)"
      context.fillRect ui_left, top, ui_width, bar_heith
      # history
      context.fillStyle = "rgba(#{time.color},0.5)"
      history_percent = time.history.length / time.max_elapsed
      history_width = ui_width*history_percent
      context.fillRect ui_left, top, history_width, bar_heith
      # speed
      context.fillStyle = "rgba(#{time.color},0.9)"
      context.strokeStyle = '#000'
      context.beginPath!
      context.moveTo ui_left+history_width, top
      context.lineTo ui_left+history_width, top+bar_heith
      context.lineTo ui_left+history_width+time.speed*bar_heith, top+bar_heith/2
      context.lineTo ui_left+history_width, top
      context.closePath!
      context.fill!
      context.stroke!
      # row header uses same colors as for speed
      context.font = "#{bar_heith}px arial, sans-serif"
      [text, x, y] = ["#{i}", ui_left-20, top+bar_heith-2]
      context.fillText text, x, y
      context.strokeText text, x, y
      context.restore!

  engine.start!
  canvas.focus!

clamp = (n, min, max) ->
  return min if n < min
  return max if n > max
  return n
